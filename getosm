#!/bin/bash

# for bringing data down from Open Street Maps for Acton Conservation Land maps.
# Jim Snyder-Grant 
# if this gets any more complicated, let's change it to PERL or some such
#
# a quick debugging tip:launch this with 
# bash-x  ./getosm (arguments)

EXIT_STATUS=0
#DEBUG=1

if [ $# -eq 0 ]; then
  echo "Arguments are one or more of  'red' 'blue' 'yellow' 'othertrails' 'bounds' 'town' 'parking' 'camping' 'BCT' 'all'"
  EXIT_STATUS=1
  exit $EXIT_STATUS
fi

args=("$@")
if [[ " ${args[@]} " =~ "all" ]]; then
    unset args
    args=('red' 'blue' 'yellow' 'othertrails' 'bounds' 'town' 'parking' 'camping' 'BCT' )
fi

# Using a bounding box makes the searches go more quickly
 ACTON_BBOX="[bbox:42.433,-71.5,42.534,-71.384]"
 # using an Acton Area ID lets us skip trails that are in the bounding box but not in Acton. 
 # One number is to get the boundary itself, the other is to use it as an area filter
 ACTON_ID=1832779
 ACTON_AREA_ID=3601832779
 # we get canoe launch by ID since it's a conservation restriction not owned by Acton
 CANOE_LAUNCH_ID="449483835"
 # generic trails filter includes paths and tracks. We removed 'footway' after editing to
 # remove that use fortrails in Acton 
 TRAILS_FILTER="way[\"highway\"~\"path|track\"][access!=private][\"name\""
 # for trails, we surpress special treatment for trails that are entirely outside Acton 
 AREA_FILTER="(area:$ACTON_AREA_ID)"
 # by default, extract lines. But exceptions are made below 
 geometry="lines"   
 
 for arg in ${args[@]}; do
   if [ ${arg} = "bounds" ]; then
   # some bounds are multipolygons stored in OSM as 'relation', others are plain old 'way'.
   # and then there's the canoe launch, which isn't owned by the town of Acton
       filters="(way($CANOE_LAUNCH_ID);relation[\"landuse\"=\"conservation\"][\"owner\"~\"Town Of Acton\",i];way[\"landuse\"=\"conservation\"][\"owner\"~\"Town Of Acton\",i])"
       KMLcolor="ffffffff"
       AREA_FILTER=""
       geometry="multipolygons"
   elif [ ${arg} = "red" ]; then
        KMLcolor="ff0000ff"
        filters="$TRAILS_FILTER~\"${arg}\",i]"
   elif [ ${arg} = "blue" ]; then
        KMLcolor="ffff0000"
        filters="$TRAILS_FILTER~\"${arg}\",i]"
   elif [ ${arg} = "yellow" ]; then
        KMLcolor="ff00ffff"
        filters="$TRAILS_FILTER~\"${arg}\",i]"
   elif [ ${arg} = "othertrails" ]; then
        KMLcolor="ffff00ff"
        filters="$TRAILS_FILTER!~\"Red|Blue|Yellow\",i]"
   elif [ ${arg} = "town" ]; then
        KMLcolor="ff00ff00"
        filters="relation($ACTON_ID)"
        AREA_FILTER=""
   elif [ ${arg} = "parking" ]; then
        KMLcolor="50BEBEBE"
        filters="way[\"amenity\"=\"parking\"][\"website\"~\"actontrails\",i]"
        geometry="multipolygons"
   elif [ ${arg} = "camping" ]; then
        KMLcolor="643C9614"
        filters="node[\"tourism\"=\"camp_site\"]"
        geometry="points" 
   elif [ ${arg} = "BCT" ]; then
        KMLcolor="55FF78F0"  
        filters="relation[\"name\"~\"Bay Circuit Trail\"]"      
   else
       echo "ERROR: Invalid arg ${arg}"
       EXIT_STATUS=1
       exit $EXIT_STATUS
   fi   
   wget_args="http://overpass-api.de/api/interpreter?data=$ACTON_BBOX;$filters$AREA_FILTER;(._;>;);out body;"
   if [ ${DEBUG} ] ; then
       echo "wget args: " ${wget_args}
   fi
    wget -O ${arg}.osm "${wget_args}"    
    # convert to KML for checking in Google Earth
    rm -f ${arg}.kml
    ogr2ogr -f KML ${arg}.kml ${arg}.osm ${geometry}
    # Let's color the KML bounds 
    sed -i  "s/<color>......../<color>${KMLcolor}/" ${arg}.kml
    # convert to GeoJSON for importing into MapBox
    rm -f ${arg}.json
    ogr2ogr -f GeoJSON ${arg}.json ${arg}.osm ${geometry}
    # ogr2ogr emits geoJSON v 1.0. MapBox needs the successor, RFC 7946. 
    # The key difference is that we must remove the crs line
    sed -i s/\"crs.*$// ${arg}.json
    
    # just checking and announcing results
    if [ -f ${arg}.kml ]; then
	    echo "created "  ${arg}.kml
    else
	    echo "ERROR: Did not create " ${arg}.kml
	    EXIT_STATUS=1
    fi
    
    if [ -f ${arg}.json ]; then
	    echo "created "  ${arg}.json
    else
	    echo "ERROR: Did not create " ${arg}.json
	    EXIT_STATUS=1	
    fi
    # server was returning 429 errors (too many requests), so lets slow our rate down. 
    sleep 5
 done

 exit $EXIT_STATUS

 
